/*
 * [Reference]
 * https://developers.google.com/apps-script/reference/drive/
 * https://developers.google.com/apps-script/guides/services/advanced#enabling_advanced_services
 * https://smartagent.blog/2018/07/06/appsscript03/
 * ※WARNING※
 * 1. File & Folder Iterator.next() Method selects items in order of created time inversely at a guess.
 * 2. May not work as you want.
 * 3. It is toooooooooooooooooooooooooooooooo slow.
 */

/// [MAIN] to run.
/// Set folder IDs.
function main()
{
  var from = "<FOLDER ID>"
  var to   = "<FOLDER ID>"
  
  /// Priming Func call.
  if (from != to)
  {
    copyFolder(from, to)
  }
}

/// Create new ID:parent folder.
/// If not want to make current folder in Destination, Use 'copyChild'.
function copyFolder(from, to)
{
  var target = DriveApp.getFolderById(from)
  var dest   = DriveApp.getFolderById(to)
  
  /// If folder is aleady exist.
  /// Get old folder.
  if (dest.getFoldersByName(target.getName()).hasNext())
  {
    dest = dest.getFoldersByName(target.getName()).next()
  }
  /// If not, create new folder.
  else
  {
    dest = dest.createFolder(target.getName())
  }
  
  /// Copy file.
  if (target.getFiles().hasNext())
  {
    copyFile(target, dest)
  }
  
  /// Sub Func call.
  if (target.getFolders().hasNext())
  {
    copyChild(target.getId(), dest.getId())
  }
}

/// Create new ID:child folder.
/// Recursive Func.
function copyChild(target_ID, dest_ID)
{
  var target = DriveApp.getFolderById(target_ID)
  var dest   = DriveApp.getFolderById(dest_ID)
  
  /// If child folder is exist.
  if (target.getFolders().hasNext())
  {
    var folderlist = target.getFolders()
    
    /// Depth-First Search.
    while (folderlist.hasNext())
    {
      var folder = folderlist.next()
      
      /// If folder is aleady exist.
      /// Get old folder.
      if (dest.getFoldersByName(folder.getName()).hasNext())
      {
        var exist = dest.getFoldersByName(folder.getName()).next()
        var temp  = DriveApp.getFolderById(exist.getId())
        
        Logger.log("<FOLDER>\tEXIST\t : %s", temp)
      }
      /// If not, create new folder.
      else
      {
        var temp = dest.createFolder(folder.getName())
        
        Logger.log("<FOLDER>\tCREATE\t : %s", temp)
      }
      
      /// Copy file.
      copyFile(folder, temp)
      
      /// If child folder has child folder.
      if (folder.getFolders().hasNext())
      {
        copyChild(folder.getId(), temp.getId())
      }
    }
  }
}

/// Create new ID:file.
/// Parameters are Folder, Not ID.
function copyFile(target, dest)
{
  var filelist = target.getFiles()
  
  while (filelist.hasNext())
  {
    var cur_file = filelist.next()
    
    /// If file is aleady exist.
    if (dest.getFilesByName(cur_file.getName()).hasNext())
    {
      var old_file = dest.getFilesByName(cur_file.getName()).next()
      
      /// Compare file size.
      if (cur_file.getSize() == old_file.getSize())
      {
        Logger.log("<FILE>\t\tEXIST\t : %s", cur_file)
      }
      else
      {
        cur_file.makeCopy(cur_file.getName() + "$$new$$", dest)
        
        Logger.log("<FILE>\t\tNEW\t : %s", cur_file)
      }
    }
    /// If not exist.
    else
    {
      cur_file.makeCopy(dest)
      
      Logger.log("<FILE>\t\tCREATE\t : %s", cur_file)
    }
  }
}
